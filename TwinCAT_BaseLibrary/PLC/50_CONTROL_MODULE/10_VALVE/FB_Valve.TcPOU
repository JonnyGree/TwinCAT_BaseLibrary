<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="FB_Valve" Id="{223f022c-0a76-49d4-ae57-cf213fa00f1c}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Valve EXTENDS FB_ControlMode
VAR_INPUT
	ib_openFeedback			: BOOL;
	ib_closeFeedback		: BOOL;	
END_VAR

VAR_OUTPUT
    ob_openCommand   		:  BOOL;  
	ob_closeCommand   		:  BOOL;       
END_VAR

VAR
	// OPC VARIABLES
	status 		   			: ST_ValveStatus  ;
	control					: ST_ValveControl;
	sim						: ST_ValveSimulation;
	
	// FB VARIABLES
	ton_openTime			: TON;
	ton_closeTime			: TON;
	startOpen				: BOOL;
	startClose				: BOOL;
    ton_ElapsedTime   		: TON;                	(* Timer for monitor current operation *)
	startMovement			: BOOL;
	error 					: ST_ValveErrorList;
	openFeedback			: BOOL;
	closeFeedback			: BOOL;
END_VAR

VAR PERSISTENT
	config       			: ST_ValveConfig;      		(* Valve configuration parameters *)
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// MODULE STATE LOGIC
SUPER^.requestMode := control.manualModeRequest;
SUPER^();  
CASE mode OF 
	
	E_Mode.OFF:
		M_Private_Off();
	
	E_Mode.MANUAL:
		// manual logic:
		;
	E_Mode.AUTO:
		// auto logic:
		;	
END_CASE


// manual control logic
M_Private_ManualControl();

// feedback simulation logic
IF sim.simEnable THEN
	M_Simulation();
END_IF

openFeedback := ib_openFeedback OR sim.simOpenFeedback;
closeFeedback := ib_closeFeedback OR sim.simCloseFeedback;

// MAIN LOGIC
CASE status.command OF		
	E_ValveCommand.CMD_OFF:
		ob_OpenCommand := FALSE;
		ob_CloseCommand:= FALSE;
		startMovement := FALSE;
		

	E_ValveCommand.CMD_CLOSE:
		ob_OpenCommand := FALSE;
		ob_CloseCommand:= TRUE;
		
		CASE status.state OF
		
		E_ValveState.VALVE_NEW_COMMAND: 
			status.state := E_ValveState.VALVE_CLOSING;
			
		E_ValveState.VALVE_CLOSING: 
			IF CloseFeedback OR NOT config.enableCloseFeedback THEN
				status.state:= E_ValveState.VALVE_CLOSED;
			ELSIF ton_ElapsedTime.et >= config.closeTimeout THEN
				(* Timeout occurred *)
				status.state:= E_ValveState.VALVE_FAULT;
				M_RaiseFault(description := error.errCloseTimeout, level := E_FaultLevel.HIGH);
			END_IF
		E_ValveState.VALVE_CLOSED: 
			startMovement := FALSE;
			IF NOT CloseFeedback AND config.enableCloseFeedback THEN
				status.state:= E_ValveState.VALVE_FAULT;
				M_RaiseFault(description := error.errLostClosePosition, level := E_FaultLevel.HIGH);
			END_IF
		END_CASE
		
		
	E_ValveCommand.CMD_OPEN:
		ob_OpenCommand := TRUE;
		ob_CloseCommand:= FALSE;
		
		CASE status.state OF
		
		E_ValveState.VALVE_NEW_COMMAND: 
			status.state := E_ValveState.VALVE_OPENING;
			
		E_ValveState.VALVE_OPENING: 
			IF OpenFeedback OR NOT config.enableOpenFeedback THEN
				status.state:= E_ValveState.VALVE_OPEN;
			ELSIF ton_ElapsedTime.et >= config.openTimeout THEN
				(* Timeout occurred *)
				status.state:= E_ValveState.VALVE_FAULT;
				M_RaiseFault(description := error.errOpenTimeout, level := E_FaultLevel.HIGH);
			END_IF
		E_ValveState.VALVE_OPEN: 
			startMovement := FALSE;
			IF NOT openFeedback AND config.enableOpenFeedback THEN
				status.state:= E_ValveState.VALVE_FAULT;
				M_RaiseFault(description := error.errLostOpenPosition, level := E_FaultLevel.HIGH);
			END_IF
		END_CASE
		
END_CASE

// OPC VARIABLES
status.mode := mode;
status.enabled := ib_enable;

// TIMER LOGIC
ton_ElapsedTime(IN:=startMovement, PT:=T#2147483647MS );
IF startMovement THEN
	status.elapsedTime := ton_ElapsedTime.ET;
END_IF

ton_openTime(IN:=startOpen, 	PT:=T#2147483647MS );
IF startOpen AND ( openFeedback OR NOT config.enableOpenFeedback ) THEN
	startOpen := FALSE;
	status.lastOpenTime := ton_openTime.ET ;
END_IF

ton_closeTime(IN:=startClose, 	PT:=T#2147483647MS );
IF startClose AND ( closeFeedback OR NOT config.enableOpenFeedback ) THEN
	startClose := FALSE;
	status.lastCloseTime := ton_closeTime.ET ;
END_IF]]></ST>
    </Implementation>
    <Method Name="M_CloseAuto" Id="{7a89c71d-7369-417e-973f-91421611a6c9}">
      <Declaration><![CDATA[METHOD M_CloseAuto : BOOL

]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF status.mode = E_Mode.AUTO THEN
	M_Private_CloseValve();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Open_Auto" Id="{7bd24405-0748-4670-81ee-17703a7e4e2c}">
      <Declaration><![CDATA[METHOD M_Open_Auto : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF status.mode = E_Mode.AUTO THEN
	M_Private_OpenValve();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Private_CloseValve" Id="{cba43f05-a8c9-4052-af4c-6a06949011fb}">
      <Declaration><![CDATA[METHOD PRIVATE M_Private_CloseValve : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[status.state 	:= E_ValveState.VALVE_NEW_COMMAND;
status.command 	:= E_ValveCommand.CMD_CLOSE;
startMovement 	:= TRUE;
startClose 		:= TRUE;
status.elapsedTime := T#0S;
M_resetFault();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Private_ManualControl" Id="{954b5030-3f47-48e9-bff1-d9126bca9554}">
      <Declaration><![CDATA[METHOD PRIVATE M_Private_ManualControl : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF status.mode = E_Mode.MANUAL THEN
	IF control.ManualOpen THEN 
		control.ManualOpen := FALSE;
		M_Private_OpenValve();
	ELSIF control.ManualClose THEN 
		control.ManualClose := FALSE;
		M_Private_CloseValve();
	END_IF
ELSE
	control.ManualOpen := FALSE;
	control.ManualClose := FALSE;
END_IF

IF control.ManualReset THEN 
	control.ManualReset := FALSE;
	M_resetFault();
	status.state := E_ValveState.VALVE_NEW_COMMAND;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Private_Off" Id="{1113a748-e2be-4fbc-afb0-6f13b7c83c5e}">
      <Declaration><![CDATA[METHOD PRIVATE M_Private_Off : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[status.state := E_ValveState.VALVE_OFF;
status.command := E_ValveCommand.CMD_OFF;
status.elapsedTime := T#0S;
M_resetFault();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Private_OpenValve" Id="{8ff9e2ab-a2a3-4bc9-b355-9361890c27fc}">
      <Declaration><![CDATA[METHOD PRIVATE M_Private_OpenValve : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[status.state 	:= E_ValveState.VALVE_NEW_COMMAND;
status.command 	:= E_ValveCommand.CMD_OPEN;
startMovement 	:= TRUE;
startOpen	  	:= TRUE;
status.elapsedTime := T#0S;
M_resetFault();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Simulation" Id="{b0d6f70b-461e-497e-8fa0-5e93dbddac0e}">
      <Declaration><![CDATA[METHOD M_Simulation : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[sim.T_CloseFeedback(IN:= status.command=E_ValveCommand.CMD_CLOSE, PT := T#5S, Q=> sim.simCloseFeedback);
sim.T_OpenFeedback(IN:= status.command=E_ValveCommand.CMD_OPEN, PT := T#5S, Q=> sim.simOpenFeedback);]]></ST>
      </Implementation>
    </Method>
    <Property Name="P_simulation" Id="{f9290215-af00-4364-8230-54ff7c9e978c}">
      <Declaration><![CDATA[PROPERTY P_simulation : REFERENCE TO BOOL]]></Declaration>
      <Get Name="Get" Id="{ffe60468-6a00-4bfd-b0b7-42cbdd38b840}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_Simulation REF= sim.simEnable;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="P_state" Id="{f5c3c552-204c-428f-9502-b1888c0a58e7}">
      <Declaration><![CDATA[PROPERTY P_state : E_ValveState]]></Declaration>
      <Get Name="Get" Id="{28794dcc-3537-485e-b165-f9d7950472aa}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_state:=status.state;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <LineIds Name="FB_Valve">
      <LineId Id="1795" Count="0" />
      <LineId Id="1902" Count="1" />
      <LineId Id="1796" Count="12" />
      <LineId Id="1899" Count="0" />
      <LineId Id="1809" Count="70" />
      <LineId Id="1901" Count="0" />
      <LineId Id="1900" Count="0" />
      <LineId Id="1880" Count="18" />
      <LineId Id="1090" Count="0" />
    </LineIds>
    <LineIds Name="FB_Valve.M_CloseAuto">
      <LineId Id="8" Count="1" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_Valve.M_Open_Auto">
      <LineId Id="6" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Valve.M_Private_CloseValve">
      <LineId Id="6" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="FB_Valve.M_Private_ManualControl">
      <LineId Id="15" Count="7" />
      <LineId Id="29" Count="2" />
      <LineId Id="5" Count="0" />
      <LineId Id="35" Count="3" />
      <LineId Id="40" Count="0" />
      <LineId Id="34" Count="0" />
    </LineIds>
    <LineIds Name="FB_Valve.M_Private_Off">
      <LineId Id="6" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="15" Count="0" />
    </LineIds>
    <LineIds Name="FB_Valve.M_Private_OpenValve">
      <LineId Id="11" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="19" Count="0" />
    </LineIds>
    <LineIds Name="FB_Valve.M_Simulation">
      <LineId Id="16" Count="0" />
      <LineId Id="11" Count="0" />
    </LineIds>
    <LineIds Name="FB_Valve.P_simulation.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Valve.P_state.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>