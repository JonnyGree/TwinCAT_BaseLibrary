<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="FB_Motor" Id="{eb93d929-c2f5-405e-91df-2b533a7b4a6d}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Motor EXTENDS FB_ControlMode
VAR_INPUT
END_VAR

VAR_OUTPUT      
END_VAR

VAR
	// OPC VARIABLES
	status 		   			: ST_MotorStatus  ;
	control					: ST_MotorControl;
	sim						: ST_MotorSimulation;
	
	// FB VARIABLES
	actualSpeed				: LREAL;
	setpoint				: LREAL;
    ton_ElapsedTime   		: TON;                	(* Timer for monitor current operation *)
	error 					: ST_MotorErrorList;
	
	rRand 		: LREAL ;
	randGen		: DRAND ;
	randValue	: LREAL;
END_VAR

VAR PERSISTENT
	config       			: ST_MotorConfig;      		(* Valve configuration parameters *)
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// MODULE STATE LOGIC
SUPER^.requestMode := control.manualModeRequest;
SUPER^();  
CASE mode OF 
	
	E_Mode.OFF:
		M_Private_Off();
	
	E_Mode.MANUAL:
		// manual logic:
		;
	E_Mode.AUTO:
		// auto logic:
		;	
END_CASE

// manual mode logic
M_Private_ManualControl();

// feedback simulation logic
IF sim.simEnable THEN
	M_Simulation();
END_IF

// OPC VARIABLES
status.mode 	:= mode;
status.enabled 	:= ib_enable;
status.currentSpeed 	:= actualSpeed;
// TIMER LOGIC
ton_ElapsedTime(IN:=FALSE, PT:=T#2147483647MS );
IF FALSE THEN
	status.elapsedTime := ton_ElapsedTime.ET;
END_IF]]></ST>
    </Implementation>
    <Method Name="M_moveBck" Id="{c0b07cac-f6a8-4af1-8baa-4c9f7af1d29e}">
      <Declaration><![CDATA[METHOD PRIVATE M_moveBck : BOOL
VAR_INPUT
	ir_setpoint : LREAL := 0.0;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[status.state 			:= E_MotorState.MOVING_BCK;
status.command 		:= E_MotorCommand.CMD_MOVE_BCK;
setpoint 			:= ir_setpoint;
status.elapsedTime 	:= T#0S;
M_resetFault();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_moveBck_Auto" Id="{00ed04b7-fd64-4c64-beb1-6d9b9e7e1887}">
      <Declaration><![CDATA[METHOD M_moveBck_Auto : BOOL
VAR_INPUT
	ir_setpoint : LREAL := 0.0;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF status.mode = E_Mode.AUTO THEN
	M_MoveBck(ir_setpoint:= ir_setpoint);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_moveFwd" Id="{b6605339-cbb0-402e-887e-6608744e5e1a}">
      <Declaration><![CDATA[METHOD PRIVATE M_moveFwd : BOOL
VAR_INPUT
	ir_setpoint : LREAL := 0.0;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[status.state 			:= E_MotorState.MOVING_FWD;
status.command 		:= E_MotorCommand.CMD_MOVE_FWD;
setpoint 			:= ir_setpoint;
status.elapsedTime 	:= T#0S;
M_resetFault();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_moveFwd_Auto" Id="{44fd1b4d-79fa-49ad-b9f3-193892abe116}">
      <Declaration><![CDATA[METHOD M_moveFwd_Auto : BOOL
VAR_INPUT
	ir_setpoint : LREAL := 0.0;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF status.mode = E_Mode.AUTO THEN
	M_MoveFwd(ir_setpoint:= ir_setpoint);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Private_ManualControl" Id="{41999efd-dc37-434d-897e-7b763cf2e0fd}">
      <Declaration><![CDATA[METHOD PRIVATE M_Private_ManualControl : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF status.mode = E_Mode.MANUAL THEN
	IF control.manualMoveFwd THEN 
		control.manualMoveFwd := FALSE;
		M_moveFwd(ir_setpoint := config.manualSetpoint);
	ELSIF control.manualMoveBwd THEN 
		control.manualMoveBwd := FALSE;
		M_moveBck(ir_setpoint := config.manualSetpoint);
	ELSIF control.manualStop THEN 
		control.manualStop := FALSE;
		M_stop();
	END_IF
ELSE
	control.manualMoveFwd := FALSE;
	control.manualMoveBwd := FALSE;
	control.manualStop := FALSE;
END_IF

IF control.ManualReset THEN 
	control.ManualReset := FALSE;
	M_resetFault();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Private_Off" Id="{20f6c8fa-d039-4744-8195-91c77b5e0345}">
      <Declaration><![CDATA[METHOD PRIVATE M_Private_Off : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[status.state := E_MotorState.OFF;
status.command := E_MotorCommand.CMD_STOP;
status.elapsedTime := T#0S;
M_resetFault();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Simulation" Id="{111f700b-b64b-440c-88c0-cacce860ae3e}">
      <Declaration><![CDATA[METHOD M_Simulation : BOOL
VAR
END_VAR

VAR CONSTANT
    rRampRateUp 		: LREAL := 0.1;   // Speed increment rate during ramp-up
    rRampRateDown 		: LREAL := 0.5; // Speed decrement rate during ramp-down
    rOscillationRange 	: LREAL := 4; // Range for oscillation around setpoint
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[randGen(seed:= 0, Num=>randValue);
rRand := (randValue - 0.5) * rOscillationRange ; // Generates random value between -rOscillationRange and +rOscillationRange

// Main Logic
IF status.command = E_MotorCommand.CMD_MOVE_FWD OR status.command = E_MotorCommand.CMD_MOVE_BCK THEN
    // Ramp-up to the setpoint
    IF actualSpeed < setpoint THEN
        actualSpeed := actualSpeed + rRampRateUp;
    ELSE
        actualSpeed := setpoint - rRampRateUp;
    END_IF

ELSIF status.command = E_MotorCommand.CMD_STOP THEN
    // Ramp-down to zero
    IF actualSpeed > 0 THEN
        actualSpeed := actualSpeed - rRampRateDown;
    ELSIF actualSpeed < 0 THEN
        actualSpeed := 0;
    END_IF

END_IF

// Simulate oscillation when running
IF status.command = E_MotorCommand.CMD_MOVE_BCK OR status.command = E_MotorCommand.CMD_MOVE_FWD THEN
    actualSpeed := actualSpeed + rRand;
ELSE
    actualSpeed := actualSpeed;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_stop" Id="{3f07e02a-411d-4978-a538-6eb623be46dc}">
      <Declaration><![CDATA[METHOD PRIVATE M_stop : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[status.state 	:= E_MotorState.STOP;
status.command := E_MotorCommand.CMD_STOP;
status.elapsedTime := T#0S;
M_resetFault();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_stopAuto" Id="{180d1a36-6f3e-497c-9db3-49479345a483}">
      <Declaration><![CDATA[METHOD M_stopAuto : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF status.mode = E_Mode.AUTO THEN
	M_stop();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="P_simulation" Id="{ae0c6d10-a0e9-4d89-85bc-1916f74f2753}">
      <Declaration><![CDATA[PROPERTY P_simulation : REFERENCE TO BOOL;]]></Declaration>
      <Get Name="Get" Id="{14c4f54f-a27d-42c4-8d83-da4d0560a1fb}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_simulation REF= sim.simEnable;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="P_state" Id="{08dae099-9e55-4f1d-97e9-8176e00c63d5}">
      <Declaration><![CDATA[PROPERTY P_state : E_MotorState]]></Declaration>
      <Get Name="Get" Id="{890e53ee-ac08-4bb2-9bd3-1aaca23c41d2}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_state:=status.state;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <LineIds Name="FB_Motor">
      <LineId Id="1183" Count="31" />
      <LineId Id="644" Count="0" />
    </LineIds>
    <LineIds Name="FB_Motor.M_moveBck">
      <LineId Id="6" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="FB_Motor.M_moveBck_Auto">
      <LineId Id="8" Count="1" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_Motor.M_moveFwd">
      <LineId Id="6" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="FB_Motor.M_moveFwd_Auto">
      <LineId Id="8" Count="1" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_Motor.M_Private_ManualControl">
      <LineId Id="39" Count="6" />
      <LineId Id="56" Count="1" />
      <LineId Id="55" Count="0" />
      <LineId Id="46" Count="3" />
      <LineId Id="58" Count="0" />
      <LineId Id="50" Count="4" />
      <LineId Id="34" Count="0" />
    </LineIds>
    <LineIds Name="FB_Motor.M_Private_Off">
      <LineId Id="6" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="15" Count="0" />
    </LineIds>
    <LineIds Name="FB_Motor.M_Simulation">
      <LineId Id="72" Count="0" />
      <LineId Id="68" Count="1" />
      <LineId Id="26" Count="7" />
      <LineId Id="44" Count="4" />
      <LineId Id="52" Count="1" />
      <LineId Id="57" Count="0" />
      <LineId Id="59" Count="4" />
      <LineId Id="65" Count="2" />
      <LineId Id="11" Count="0" />
    </LineIds>
    <LineIds Name="FB_Motor.M_stop">
      <LineId Id="6" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="FB_Motor.M_stopAuto">
      <LineId Id="8" Count="1" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_Motor.P_simulation.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Motor.P_state.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>