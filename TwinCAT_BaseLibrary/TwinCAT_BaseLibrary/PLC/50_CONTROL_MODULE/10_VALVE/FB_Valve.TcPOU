<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="FB_Valve" Id="{223f022c-0a76-49d4-ae57-cf213fa00f1c}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Valve
VAR_INPUT
    bEnable        		: BOOL;                 (* Enable valve control *)
    bAuto          		: BOOL;                 (* TRUE = Auto mode, FALSE = Manual mode *)
	b_InOpenFeedback	:BOOL;
	b_InCloseFeedback	:BOOL;	
END_VAR

VAR_OUTPUT
    b_OutOpenCommand   	:  BOOL;  
	b_OutCloseCommand   :  BOOL;       
END_VAR

VAR
	data 		   			: ST_ValveData  ;
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.StructuredType' := '1'}
	bManualOpen    			: BOOL;                 (* Manual open command *)
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.StructuredType' := '1'}
    bManualClose   			: BOOL;                 (* Manual close command *)
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.StructuredType' := '1'}
    bManualReset   			: BOOL;                 (* Manual reset command *)
    ton_MovementTime   		: TON;                	(* Timer for monitor current operation *)
	bStartMovement			: BOOL;
	bOutOpen				: BOOL;
	bOutClose				: BOOL;
END_VAR

VAR PERSISTENT
	stConfig       : ST_ValveConfig;      (* Valve configuration parameters *)
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* Module State logic *)
IF NOT bEnable THEN
    (* Valve is disabled - reset to OFF state *)
	M_PrivateOff();
    RETURN;
ELSIF bAuto THEN 
	data.eModuleState := E_ModuleState.AUTO;
ELSE
	data.eModuleState := E_ModuleState.MANUAL;
	M_PrivateManualMode();
END_IF


(* Main state handling *)
CASE data.eState OF		
    E_ValveState.VALVE_OPENING:

        IF ton_MovementTime.et >= stConfig.tOpenTimeout THEN
            (* Timeout occurred *)
            data.eState:= E_ValveState.VALVE_FAULT;
            data.fault.active := TRUE;
            data.fault.description := 'opening timeout';
        ELSIF b_InOpenFeedback AND stConfig.bEnableOpenFeedback THEN
           	data.eState:= E_ValveState.VALVE_OPEN;
			data.lastOpenTime := ton_MovementTime.PT ;
			bStartMovement := FALSE;
		ELSIF NOT stConfig.bEnableOpenFeedback THEN
			data.eState:= E_ValveState.VALVE_OPEN;
			bStartMovement := FALSE;
        END_IF

	E_ValveState.VALVE_CLOSING:
        IF ton_MovementTime.et >= stConfig.tCloseTimeout THEN
            (* Timeout occurred *)
            data.eState:= E_ValveState.VALVE_FAULT;
            data.fault.active := TRUE;
            data.fault.description := 'closing timeout';
        ELSIF b_InCloseFeedback AND stConfig.bEnableCloseFeedback THEN
           	data.eState:= E_ValveState.VALVE_CLOSED;
			data.lastOpenTime := ton_MovementTime.PT ;
			bStartMovement := FALSE;
		ELSIF NOT stConfig.bEnableOpenFeedback THEN
			data.eState:= E_ValveState.VALVE_CLOSED;
			bStartMovement := FALSE;
        END_IF

    E_ValveState.VALVE_FAULT:
        (* Fault Handling: Manual reset or auto-clear can be added here *)
        (* In this simple example, it remains in fault state until reset manually *)
	

END_CASE;

ton_MovementTime(IN:=bStartMovement, PT:=T#2147483647MS );]]></ST>
    </Implementation>
    <Method Name="closeAuto" Id="{7a89c71d-7369-417e-973f-91421611a6c9}">
      <Declaration><![CDATA[METHOD closeAuto : BOOL

]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF data.eModuleState = E_ModuleState.AUTO THEN
	M_PrivateCloseValve();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_PrivateCloseValve" Id="{cba43f05-a8c9-4052-af4c-6a06949011fb}">
      <Declaration><![CDATA[METHOD PRIVATE M_PrivateCloseValve : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[data.eState := E_ValveState.VALVE_CLOSING;
data.lastCloseTime := T#0S;  (* Reset last open time *)
bStartMovement := TRUE;
data.tElapsedTime := T#0S;
bOutOpen := FALSE;
bOutClose:= TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_PrivateManualMode" Id="{954b5030-3f47-48e9-bff1-d9126bca9554}">
      <Declaration><![CDATA[METHOD PRIVATE M_PrivateManualMode : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF data.eModuleState = E_ModuleState.MANUAL THEN
	IF bManualOpen THEN 
		bManualOpen := FALSE;
		M_PrivateOpenValve();
	ELSIF bManualClose THEN 
		bManualClose := FALSE;
		M_PrivateCloseValve();
	ELSIF bManualReset THEN 
		bManualReset := FALSE;
		M_resetFault();
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_PrivateOff" Id="{1113a748-e2be-4fbc-afb0-6f13b7c83c5e}">
      <Declaration><![CDATA[METHOD PRIVATE M_PrivateOff : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[data.eState := E_ValveState.VALVE_OFF;
data.lastOpenTime := T#0S;  (* Reset last open time *)
data.tElapsedTime := T#0S;
bOutOpen := FALSE;
bOutClose:= FALSE;
M_resetFault();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_PrivateOpenValve" Id="{8ff9e2ab-a2a3-4bc9-b355-9361890c27fc}">
      <Declaration><![CDATA[METHOD PRIVATE M_PrivateOpenValve : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[data.eState := E_ValveState.VALVE_OPENING;
data.lastOpenTime := T#0S;  (* Reset last open time *)
bStartMovement := TRUE;
data.tElapsedTime := T#0S;
bOutOpen := TRUE;
bOutClose:= FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_resetFault" Id="{3622e483-cd75-48fd-9e02-996e5766221e}">
      <Declaration><![CDATA[METHOD M_resetFault : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[data.fault.active := FALSE;
data.fault.description := '';
data.eState := E_ValveState.VALVE_OFF;]]></ST>
      </Implementation>
    </Method>
    <Method Name="openAuto" Id="{7bd24405-0748-4670-81ee-17703a7e4e2c}">
      <Declaration><![CDATA[METHOD openAuto : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF data.eModuleState = E_ModuleState.AUTO THEN
	M_PrivateOpenValve();
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Valve">
      <LineId Id="30" Count="2" />
      <LineId Id="137" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="139" Count="2" />
      <LineId Id="143" Count="0" />
      <LineId Id="164" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="223" Count="0" />
      <LineId Id="56" Count="3" />
      <LineId Id="62" Count="5" />
      <LineId Id="70" Count="1" />
      <LineId Id="203" Count="0" />
      <LineId Id="205" Count="0" />
      <LineId Id="201" Count="1" />
      <LineId Id="234" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="217" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="206" Count="10" />
      <LineId Id="233" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="226" Count="3" />
      <LineId Id="232" Count="0" />
      <LineId Id="105" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="166" Count="0" />
      <LineId Id="165" Count="0" />
    </LineIds>
    <LineIds Name="FB_Valve.closeAuto">
      <LineId Id="8" Count="1" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_Valve.M_PrivateCloseValve">
      <LineId Id="6" Count="1" />
      <LineId Id="10" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="8" Count="1" />
    </LineIds>
    <LineIds Name="FB_Valve.M_PrivateManualMode">
      <LineId Id="15" Count="6" />
      <LineId Id="24" Count="2" />
      <LineId Id="22" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Valve.M_PrivateOff">
      <LineId Id="6" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="15" Count="0" />
    </LineIds>
    <LineIds Name="FB_Valve.M_PrivateOpenValve">
      <LineId Id="11" Count="4" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="FB_Valve.M_resetFault">
      <LineId Id="5" Count="2" />
    </LineIds>
    <LineIds Name="FB_Valve.openAuto">
      <LineId Id="6" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>